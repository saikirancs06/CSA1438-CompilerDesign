C Program:

#include <stdio.h>
#include <ctype.h>

// Function prototypes
int parseExpression();
int parseTerm();
int parseFactor();

char input[100];
int currentPos;

// Function to match the current token with an expected token
int match(char expected) {
    if (input[currentPos] == expected) {
        currentPos++;
        return 1;  // Match successful
    } else {
        return 0;  // Match failed
    }
}

// Function to parse an arithmetic expression
int parseExpression() {
    int result = parseTerm();  // Parse the first term

    while (input[currentPos] == '+' || input[currentPos] == '-') {
        char operator = input[currentPos];
        currentPos++;

        int nextTerm = parseTerm();  // Parse the next term

        // Perform the operation
        if (operator == '+') {
            result += nextTerm;
        } else {
            result -= nextTerm;
        }
    }

    return result;
}

// Function to parse a term
int parseTerm() {
    int result = parseFactor();  // Parse the first factor

    while (input[currentPos] == '*' || input[currentPos] == '/') {
        char operator = input[currentPos];
        currentPos++;

        int nextFactor = parseFactor();  // Parse the next factor

        // Perform the operation
        if (operator == '*') {
            result *= nextFactor;
        } else {
            result /= nextFactor;
        }
    }

    return result;
}

// Function to parse a factor
int parseFactor() {
    int result;

    if (isdigit(input[currentPos])) {
        // If the current character is a digit, parse the number
        sscanf(input + currentPos, "%d", &result);
        while (isdigit(input[currentPos])) {
            currentPos++;
        }
    } else if (input[currentPos] == '(') {
        // If the current character is '(', parse the expression inside the parentheses
        currentPos++;  // Move past '('
        result = parseExpression();
        match(')');  // Match ')'
    } else {
        // Invalid input
        printf("Error: Invalid input\n");
        result = 0;
    }

    return result;
}

int main() {
    printf("Enter an arithmetic expression: ");
    fgets(input, sizeof(input), stdin);

    currentPos = 0;
    int result = parseExpression();

    if (input[currentPos] == '\0' || input[currentPos] == '\n') {
        printf("Result: %d\n", result);
    } else {
        printf("Error: Invalid input\n");
    }

    return 0;
}

Input:
3 + 5 * 2
Output:
Result: 13

C Program:

#include <stdio.h>
#include <string.h>

#define MAX_RULES 10
#define MAX_SYMBOLS 10

char grammar[MAX_RULES][MAX_SYMBOLS];

void eliminateLeftRecursion(int numRules) {
    for (int i = 0; i < numRules; i++) {
        for (int j = 0; j < i; j++) {
            if (grammar[i][0] == grammar[j][0]) {
                // Eliminate left recursion
                char temp[MAX_SYMBOLS];
                strcpy(temp, grammar[i]);

                for (int k = 0; k < MAX_SYMBOLS; k++) {
                    grammar[i][k] = '\0';
                }

                for (int k = 0; k < MAX_SYMBOLS; k++) {
                    if (temp[0] != grammar[j][0]) {
                        strcat(grammar[i], temp + 3);
                        strcat(grammar[i], grammar[j]);
                        break;
                    }
                }
            }
        }
    }
}

int main() {
    int numRules;

    printf("Enter the number of rules: ");
    scanf("%d", &numRules);

    printf("Enter the grammar rules:\n");
    for (int i = 0; i < numRules; i++) {
        scanf("%s", grammar[i]);
    }

    eliminateLeftRecursion(numRules);

    printf("\nGrammar after eliminating left recursion:\n");
    for (int i = 0; i < numRules; i++) {
        printf("%s\n", grammar[i]);
    }

    return 0;
}

Input:
3
A -> Aa | Ab | c
B -> Ba | Bb | d
C -> Ca | Cb | e

Output:
Grammar after eliminating left recursion:
A -> caA' | cbA' | cA'
A' -> aA' | bA' | ε
B -> dbB' | eB'
B' -> aB' | bB' | ε
C -> ecC' | ε
C' -> aC' | bC' | ε

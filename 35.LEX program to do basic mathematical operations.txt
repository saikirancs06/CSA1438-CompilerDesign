LEX Program:

%{
#undef yywrap
#define yywrap() 1

#include <stdio.h>
#include <stdlib.h>

int f1 = 0, f2 = 0;
char oper;
float op1 = 0, op2 = 0, ans = 0;

void eval();
%}

DIGIT [0-9]
NUM {DIGIT}+(\.{DIGIT}+)?
OP [*/+-]

%%

{NUM} {
    if (f1 == 0) {
        op1 = atof(yytext);
        f1 = 1;
    } else if (f2 == -1) {
        op2 = atof(yytext);
        f2 = 1;
    }

    if ((f1 == 1) && (f2 == 1)) {
        eval();
        f1 = 0;
        f2 = 0;
    }
}

{OP} {
    oper = yytext[0];
    f2 = -1;
}

[\n] {
    if (f1 == 1 && f2 == 1) {
        eval();
        f1 = 0;
        f2 = 0;
    }
    printf("\nEnter expression: ");
}

%%

int main() {
    printf("Enter expression: ");
    yylex();
    return 0;
}

void eval() {
    switch (oper) {
        case '+':
            ans = op1 + op2;
            break;
        case '-':
            ans = op1 - op2;
            break;
        case '*':
            ans = op1 * op2;
            break;
        case '/':
            if (op2 == 0) {
                printf("ERROR: Division by zero\n");
                return;
            } else {
                ans = op1 / op2;
            }
            break;
        default:
            printf("Invalid operator\n");
            return;
    }
    printf("The answer is = %.2f\n", ans);
}

Output:

C:\Users\saiki>cd\lex program

C:\lex program>flex 35.l

C:\lex program>gcc lex.yy.c

C:\lex program>a.exe
Enter expression: 5+5
The answer is = 10.00

Enter expression: 5-5
The answer is = 0.00

Enter expression: 10/2
The answer is = 5.00

Enter expression: 5*5
The answer is = 25.00
